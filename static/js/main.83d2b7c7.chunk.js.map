{"version":3,"sources":["components/layout/Navbar.js","components/home/SearchCountry.js","actions/searchAction.js","actions/types.js","components/home/CardData.js","components/home/Landing.js","reducers/searchReducers.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Navbars","props","Navbar","bg","expand","Brand","href","Toggle","aria-controls","SearchCountry","componentDidMount","onGetData","retrieveCountry","url","e","this","target","value","countryName","Container","fluid","Row","Col","md","span","offset","className","onChange","handleChange","bind","map","option","index","key","country","Component","connect","state","Countries","data","dispatch","axios","get","then","response","type","catch","error","getData","payload","err","console","log","CardData","cases","todayCases","deaths","todayDeaths","recovered","active","critical","casesPerOneMillion","Landing","initialState","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83d2b7c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Navbar} from 'react-bootstrap';\r\n\r\nconst Navbars = props =>{\r\n\r\n  return  <div>\r\n  <Navbar bg=\"light\" expand=\"lg\">\r\n  <Navbar.Brand href=\"#home\">Covid-19</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\r\n</Navbar>\r\n<br></br>\r\n  </div>\r\n\r\n\r\n\r\n}\r\nexport default Navbars;\r\n","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getData,retrieveCountry} from '../../actions/searchAction';\r\nimport {Container,Col,Row} from 'react-bootstrap';\r\n\r\nexport class SearchCountry extends Component{\r\n\r\n  constructor(props) {\r\n       super(props);\r\n       this.url= 'https://coronavirus-19-api.herokuapp.com/countries';  // I declare the variable here\r\n   }\r\n    componentDidMount = () => {\r\n        let url = 'https://coronavirus-19-api.herokuapp.com/countries';\r\n        this.props.onGetData(url, { ...this.props });\r\n        this.props.retrieveCountry(this.url,0);\r\n\r\n    }\r\n\r\n    handleChange(e) {\r\n       this.props.retrieveCountry(this.url,e.target.value);\r\n      }\r\n\r\n\r\n\r\nrender(){\r\n  const {countryName} = this.props;\r\n\r\n  if (!countryName) {\r\n           return (\r\n               <div>Loading...</div>\r\n           );\r\n       }\r\n  return (\r\n    <Container fluid>\r\n    <Row>\r\n      <Col md={{ span: 4, offset: 4 }}>\r\n      <div className=\"select\">\r\n      <select className=\"custom-select\" value={this.value}  onChange={this.handleChange.bind(this)}>\r\n        {countryName.map((option,index)=>\r\n          <option key={index} value={index}>{option.country}</option>\r\n              )};\r\n        </select>\r\n        </div>\r\n        </Col>\r\n    </Row>\r\n    <br></br>\r\n  </Container>\r\n\r\n\r\n\r\n  )\r\n}\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    countryName : state.Countries.data,\r\n    country : state.Countries.country\r\n  } // state\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n     return {\r\n         onGetData: (url, props) => dispatch(getData(url, props)),\r\n         retrieveCountry: (url,key) => dispatch(retrieveCountry(url, key)),\r\n    }\r\n  }\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(SearchCountry);\r\n","import {FEATCH_COUNTRY,RETRIEVE_COUNTRY,GET_DATA_SUCCESS} from './types';\r\nimport axios  from 'axios';\r\nconst getDataSuccess = (data) => {\r\n    return {\r\n        type: GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const getData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.get(url)\r\n        .then(response => {\r\n            dispatch(getDataSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n            //TODO: handle the error when implemented\r\n        })\r\n    }\r\n}\r\nexport const featchCountry = (url, props) => dispatch =>{\r\n\r\n    axios.get(url)\r\n      .then(response =>dispatch({\r\n          type:FEATCH_COUNTRY,\r\n          payload : response.data\r\n        })\r\n\r\n      )\r\n      .catch(\r\n        err=>console.log(err)\r\n      )\r\n\r\n\r\n\r\n}\r\nexport const retrieveCountry = (url,key) => dispatch =>{\r\n\r\n    axios.get(url)\r\n      .then(response =>dispatch({\r\n          type:RETRIEVE_COUNTRY,\r\n          payload : response.data[key]\r\n        })\r\n\r\n      )\r\n      .catch(\r\n        err=>console.log(err)\r\n      )\r\n\r\n}\r\n","\r\nexport const FEATCH_COUNTRY = 'FEATCH_COUNTRY';\r\nexport const RETRIEVE_COUNTRY = 'RETRIEVE_COUNTRY';\r\n\r\nexport const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';\r\n","import React,{Component} from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nexport class CardData extends Component{\r\n\r\n  render(){\r\n    const {country} = this.props;\r\n\r\nreturn(\r\n<div className=\"container-fluid\">\r\n<div className=\"row\">\r\n    <div className=\"col-md-3\">\r\n  <div className=\"card text-dark bg-white mb-3 text-center card-height\" >\r\n    <div className=\"card-header text-center\">Cas</div>\r\n    <div className=\"card-body\">\r\n      <h5 className=\"card-title text-center \">{country.cases}</h5>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n<div className=\"col-md-3\">\r\n<div className=\"card text-dark bg-white mb-3 text-center card-height \" >\r\n<div className=\"card-header text-center\">Cas d'aujourd'hui</div>\r\n<div className=\"card-body\">\r\n  <h5 className=\"card-title text-center text-warning\">{country.todayCases}</h5>\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n<div className=\"col-md-3\">\r\n<div className=\"card text-dark bg-white mb-3 text-center card-height\" >\r\n<div className=\"card-header text-center\">Dècès</div>\r\n<div className=\"card-body\">\r\n  <h5 className=\"card-title text-center text-danger\" >{country.deaths}</h5>\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n<div className=\"col-md-3\">\r\n<div className=\"card text-dark bg-white mb-3 text-center card-height\" >\r\n<div className=\"card-header text-center\">Décès d'aujourd'hui</div>\r\n<div className=\"card-body\">\r\n  <h5 className=\"card-title text-center\">{country.todayDeaths}</h5>\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n<div className=\"row\">\r\n    <div className=\"col-md-3 text-center\">\r\n  <div className=\"card text-dark bg-white mb-3 card-height\" >\r\n    <div className=\"card-header text-center\">Rétablie</div>\r\n    <div className=\"card-body\">\r\n      <h5 className=\"card-title text-center text-success\">{country.recovered}</h5>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n<div className=\"col-md-3\">\r\n<div className=\"card text-dark bg-white mb-3 text-center card-height\" >\r\n<div className=\"card-header text-center\">Active</div>\r\n<div className=\"card-body\">\r\n  <h5 className=\"card-title text-center\">{country.active}</h5>\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n<div className=\"col-md-3\">\r\n<div className=\"card text-dark bg-white mb-3 text-center card-height\" >\r\n<div className=\"card-header text-center\">Etat critique</div>\r\n<div className=\"card-body\">\r\n  <h5 className=\"card-title text-center\">{country.critical}</h5>\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n<div className=\"col-md-3\">\r\n<div className=\"card text-dark bg-white mb-3 text-center card-height\" >\r\n<div className=\"card-header text-center\">Cas par un million</div>\r\n<div className=\"card-body\">\r\n  <h5 className=\"card-title text-center\">{country.casesPerOneMillion}</h5>\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n);\r\n  }\r\n}\r\nconst mapStateToProps = state =>({\r\n  country : state.Countries.country\r\n})\r\nexport default connect(mapStateToProps)(CardData);\r\n","import React,{Component} from 'react';\r\nimport SearchCountry from './SearchCountry';\r\nimport CardData from './CardData';\r\nexport class Landing extends Component{\r\n  render(){\r\n    return(\r\n       <div>\r\n      <SearchCountry />\r\n      <CardData />\r\n      </div>\r\n\r\n)\r\n  }\r\n}\r\n\r\n\r\nexport default Landing;\r\n","import {FEATCH_COUNTRY,RETRIEVE_COUNTRY,GET_DATA_SUCCESS} from '../actions/types';\r\n\r\nconst initialState = {\r\n  countryName : [],\r\n  country : [],\r\n  data:null\r\n}\r\n\r\nexport default function(state=initialState,action){\r\n  switch (action.type) {\r\n    case FEATCH_COUNTRY:\r\n      return{\r\n        ...state,\r\n        countryName:action.payload,\r\n      }\r\n      case RETRIEVE_COUNTRY:\r\n        return{\r\n          ...state,\r\n          country:action.payload,\r\n        }\r\n        case GET_DATA_SUCCESS:\r\n          return{\r\n            ...state,\r\n            data:action.data,\r\n          }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport searchReducers from './searchReducers';\r\n\r\n\r\nexport default combineReducers({\r\n  Countries : searchReducers,\r\n});\r\n","import {createStore,applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension/developmentOnly';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\n\r\nconst store = createStore(rootReducer,initialState,composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router,Route } from 'react-router-dom';\n\nimport Navbars from './components/layout/Navbar';\n\nimport Landing from './components/home/Landing';\n\nimport './App.css';\n\nimport store from './store';\n\n\nfunction App() {\n\n  return (\n\n    <Provider store={store}>\n    <Router >\n  <Navbars></Navbars>\n  <Route exact path=\"/\" component={Landing} ></Route>\n  </Router>\n  </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}